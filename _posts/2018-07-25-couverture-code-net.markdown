---
title: "Calculer la couverture de code d'un projet .Net"
date: 2018-07-25 00:00:00 +001
layout: post
author: Yvan Razafindramanana
license: CC-BY-SA-4.0
---

<acronym title="En r√©sum√©... (Too long; Didn't Read)">TL;DR</acronym> Avec les outils [AltCover](https://github.com/SteveGilham/altcover)
et [ReportGenerator](https://danielpalme.github.io/ReportGenerator/)
il est relativement facile de g√©n√©rer des statistiques au format HTML sur la couverture de
votre code .Net par les tests unitaires.

```powershell
dotnet test /p:AltCover=true
ReportGenerator.exe -reports:coverage.xml -targetdir:./coverage
```
<!--more-->

Article inspir√© par l'excellent 
[Scott Hanselman](https://www.hanselman.com/blog/AltCoverAndReportGeneratorGiveAmazingCodeCoverageOnNETCore.aspx)

## Principe

La couverture de code est une mesure int√©ressante (mais pas infaillible) pour analyser comment
votre code est effectivement test√© unitairement. Elle indique
quelles lignes de code sont ex√©cut√©es par les tests unitaires
et dans quelle mesure les diff√©rents branchements
dans le code sont test√©s&nbsp;: par exemple si toutes les valeurs possibles d'un ```if``` sont test√©es,
si toutes les clauses ```catch``` sont test√©es, etc.

Et pourtant cette m√©trique est difficile √† obtenir dans Visual Studio (ou VS Code) pour le commun des mortels,
sauf si vous avez une licence Entreprise üí∂ ou si vous utilisez une plateforme d'int√©gration continue comme 
VSTS avec des builds bien configur√©s üòá.

Heureusement la communaut√© fournit des initiatives ouvertes permettant d'obtenir ces informations √† moindre
frais. Voici une solution, parmi les multiples options disponibles, utilisant une combinaison de deux outils
open source.

## Analyser avec AltCover 

[AltCover](https://github.com/SteveGilham/altcover) va d'abord 
lancer vos tests unitaires, les analyser et produire un ficher
de couverture de code ```coverage.xml```.

On peut installer cet outil dans son projet de tests avec NuGet&nbsp;:

```powershell
cd [...]\MonProjet.Tests

dotnet add package AltCover
```

Puis lancer les tests unitaires et produire le ficher ```coverage.xml```&nbsp;:

```powershell
dotnet test /p:AltCover=true
```

Le framework de tests unitaires utilis√© importe peu, tant qu'il
peut √™tre lanc√© avec ```dotnet test```.

## Un rapport ReportGenerator

Le fichier g√©n√©r√© par AltCover est un fichier XML au format OpenCover.
Diffilement lisible par un √™tre humain, il peut √™tre transform√© en pages HTML
par [ReportGenerator](https://danielpalme.github.io/ReportGenerator/).

On peut installer cet outil, √©galement avec NuGet&nbsp;:

```powershell
dotnet add package ReportGenerator
```

Petite astuce pour continuer, il faut retrouver le chemin vers l'ex√©cutable
ReportGenerator.exe, cach√© quelque part dans votre r√©pertoires de packages NuGet.

```powershell
Get-ChildItem $env:USERPROFILE\.nuget\packages\reportgenerator -Recurse -File `
	| Where-Object { $_.Name -eq "ReportGenerator.exe" } `
	| Sort-Object -Descending { $_.LastWriteTime } `
	| Select-Object -First 1 `
	| ForEach-Object { $_.FullName }
```

Enfin lancer la g√©n√©ration du rapport HTML&nbsp;:

```powershell
c:\[...]\ReportGenerator.exe -reports:coverage.xml -targetdir:./coverage
```

Le rapport est alors accessible dans ```./coverage/index.htm```.

## En r√©sum√©

Voici un script Powershell pour automatiser ces √©tapes
(sauf l'installation des packages NuGet).

```powershell
$reportgenerator = Get-ChildItem $env:USERPROFILE\.nuget\packages\reportgenerator -Recurse -File `
	| Where-Object { $_.Name -eq "ReportGenerator.exe" } `
	| Sort-Object -Descending { $_.LastWriteTime } `
	| Select-Object -First 1 `
	| ForEach-Object { $_.FullName }

dotnet test /p:AltCover=true /p:AltCoverXmlreport="./coverage/coverage.xml"

& $reportgenerator -reports:./coverage/coverage.xml -targetdir:./coverage/report

Start-Process ".\coverage\report\index.htm"
```

Autre astuce, g√©n√©rez le rapport dans le r√©pertoire ```./coverage```
pour ne pas polluer la racine de votre projet avec les fichiers g√©n√©r√©s.

La derni√®re commande ```Start-Process``` est optionelle, elle ouvre
le rapport dans votre navigateur pr√©f√©r√©.
