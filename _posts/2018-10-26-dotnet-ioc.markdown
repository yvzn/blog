---
title: "Injection de d√©pendances dans les Azure Functions"
date: 2018-09-18 00:00:00 +001
layout: post
author: Yvan Razafindramanana
license: CC-BY-SA-4.0
---

<acronym title="En r√©sum√©... (Too long; Didn't Read)">TL;DR</acronym> La philosophie fondamentalement statique et proc√©durale des Azure Functions fait qu'il peut √™tre contre-intuitif d'utiliser des concepts avanc√©s de la programmation objet, tels que l'injection de d√©pendances.

Cependant plusieurs cas d'utilisation peuvent justifier le recours √† ces concepts, pour simplifier l'√©criture.

Heureusement, l'arriv√©e du support de .Net Core 2.x dans le nouveau runtime des Azure Functions (C#) rend possible l'utilisation des outils du le framework ‚Äì et donc en particulier l'injection de d√©pendances.

<!--more-->

# Uniquement pour les Functions ?

Les outils en question sont dans le package NuGet 
[`Microsoft.Extensions.DependencyInjection`](https://www.nuget.org/packages/Microsoft.Extensions.DependencyInjection/). Il est fourni par d√©faut dans le SDK 2.x, mais vous devrez peut-√™tre l'ajouter manuellement.

Dans cet article, je prends pour exemple les Azure Functions, dont les nombreuses fonctionnalit√©s natives peuvent √™tre compl√©t√©es par tout l'arsenal du framework.

Mais le code ci-apr√®s fonctionne √©galement sur toutes les plateformes compatibles .Net standard. On pourrait donc imaginer s'en servir pour une application console, un device IoT, etc.

# Configurer avec ServiceCollection

La premi√®re √©tape est d'instancer un objet `ServiceCollection` qui va nous permettre de configurer l'injection ‚Äì exactement comme on le ferait dans une application ASP.NET Core classique.

```cs
var servicesCollection = new ServicesCollection();
```

Les plus perspicaces remarqueront que cet objet ressemble √©trangement √† celui qui est pass√© en param√®tre √† la m√©thode `ConfigureServices(IServiceCollection)` du `Startup.cs` ASP.NET Core. Un indice chez vous : ce n'est pas un hasard üòâ.

Une fois cet objet instanci√©, vous pouvez utiliser exactement les m√™mes m√©thodes `AddSingleton`, `AddScoped`, `AddTransient`, etc. que dans ASP.NET Core, pour configurer la r√©solution de vos d√©pendances en fonction de la dur√©e de vie souhait√©e.

Imaginons par exemple une interface `ICustomerRepository` et l'impl√©mentation correspondante `CustomerRepository`. Voici comment elle pourrait √™tre configur√©e dans `ServiceCollection` :

```cs
servicesCollection.AddSingleton<ICustomerRepository, CustomerRepository>();
```

# Instancier avec ServiceProvider 

Imaginons maintenant un `BillingService` qui a besoin d'une instance de `ICustomerRepository`. Pour pouvoir utiliser cette instance, il faut la d√©clarer dans le constructeur :

```cs
public class BillingService
{
    public BillingService(ICustomerRepository customerRepository) 
    {
        this.customerRepository = customerRepository;
    }
}
```

L'injection de d√©pendances nous √©vite d'avoir √† instancier manuellement l'impl√©mentation de `ICustomerRepository` √† utiliser. C'est le moteur d'injection qui va nous la fournir via le constructeur.

Comment √ßa ü§î ?

La `ServiceCollection` cr√©√©e plus haut fournit une m√©thode `BuildServiceProvider` qui retourne un provider capable de nous instancier les objets __et__ leurs d√©pendances de mani√®re automatique.

```cs
var services = serviceCollection.BuildServiceProvider();
var billingService = services.GetRequiredService<BillingService>();
```

L'instance `billingService` est cr√©√©e dynamiquement et son champ `customerRepository` est valoris√© avec une instance de `CustomerRepository` via le constructeur.

Il faut √©galement au pr√©alable d√©clarer notre `BillingService` dans la `ServiceCollection` :

```cs
serviceCollection.AddSingleton<BillingService>();
```

# Enrichissement

Et l√† vous allez me dire : √ßa commence √† faire beaucoup de code pour instancer seulement deux objets.

C'est pas faux. Mais mon exemple reste relativement trivial.

Imaginez que votre `BillingService` ait aussi besoin d'un `IOrderRepository` en plus de `ICustomerRepository`. Imaginez en plus que cet `IOrderRepository` ait lui aussi besoin de `ICustomerRepository`.

L'injection de d√©pendances vous √©vite de devoir r√©fl√©chir √† l'ordre et √† la mani√®re dont sont instanci√©s tous ces objets.

Vous pouvez en plus injecter des composants du framework lui-m√™me.

Le gain est r√©ellement significatif quand on a une hi√©rarchie de composants qui ont besoin les uns des autres, par exemple avec un d√©coupage en couches m√©tier (contr√¥leur, service, entity) et qui ont √©galement besoin de services tiers.

Un bon vieux code lasagne comme on les aime üôÇüçï.

# Code final

Si on met tout les morceaux ensemble, on obtient ceci :

```cs
private static IServiceProvider ConfigureServices()
{
    var serviceCollection = new ServiceCollection();

    serviceCollection.AddSingleton<BillingService>();
    serviceCollection.AddSingleton<ICustomerRepository, CustomerRepository>();

    return serviceCollection.BuildServiceProvider();
}
```

Dans notre Azure Function, √† l'endroit o√π on a besoin d'une instance de `BillingService` :

```cs
private static readonly IServiceProvider services = ConfigureServices();
private static readonly BillingService billingService = services.GetRequiredService<BillingService>();
```

Pensez bien √† d√©clarer ces variables `static` afin de b√©n√©ficier de l'effet de cache des Azure Functions.

En effet, une fois son ex√©cution termin√©e, la classe contenant votre code reste en m√©moire au minimum cinq minutes avant d'√™tre d√©charg√©e. Si, dans cet intervalle, votre fonction est √† nouveau appel√©e, l'instance `billingService` d√©clar√©e statique sera toujours pr√©sente en m√©moire et n'aura pas besoin d'√™tre √† nouveau initialis√©e.

Si vous injectez des ressources co√ªteuses (comme un client http par exemple), vous √©viterez un d√©marrage √† froid qui ralentit consid√©rablement les temps de r√©ponse des fonctions.

# Conclusion

Ce m√©canisme d'injection de d√©pendances, initialement pr√©sent dans ASP.NET core, fonctionne d√©sormais sur toutes les plateformes compatibles .NET standard, y compris les Azure Functions V2.

Dans un prochain article, je montrerai comment utiliser cette injection, pour param√©trer simplement un client HTTP avec une politique de rejeu et un coupe-circuit.
